// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique @map("username")
  email             String?   @unique
  passwordHash      String    @map("password_hash")
  isActive          Boolean   @default(true) @map("is_active")
  failedLoginCount  Int       @default(0) @map("failed_login_count")
  lockedUntil       BigInt?   @map("locked_until") // epoch ms
  lastLoginAt       BigInt?   @map("last_login_at") // epoch ms
  passwordUpdatedAt BigInt    @map("password_updated_at") // epoch ms
  createdAt         BigInt    @map("created_at") // epoch ms
  updatedAt         BigInt    @map("updated_at") // epoch ms

  sessions          Session[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model Session {
  id        String    @id
  userId    Int       @map("user_id")
  createdAt BigInt    @map("created_at") // epoch ms
  lastUsedAt BigInt   @map("last_used_at") // epoch ms
  expiresAt BigInt    @map("expires_at") // epoch ms
  ip        String?
  userAgent String?   @map("user_agent")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model PasswordResetToken {
  tokenHash String    @id @map("token_hash")
  userId    Int       @map("user_id")
  createdAt BigInt    @map("created_at") // epoch ms
  expiresAt BigInt    @map("expires_at") // epoch ms
  usedAt    BigInt?   @map("used_at") // epoch ms

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model PasswordResetRequest {
  id        Int     @id @default(autoincrement())
  ip        String?
  createdAt BigInt  @map("created_at") // epoch ms

  @@index([ip, createdAt])
  @@index([createdAt])
  @@map("password_reset_requests")
}

model LoginAttempt {
  id          Int       @id @default(autoincrement())
  ip          String?
  usernameKey String?   @map("username_key")
  createdAt   BigInt    @map("created_at") // epoch ms
  success     Boolean   // 0 for failure, 1 for success

  @@index([ip, createdAt])
  @@index([usernameKey, createdAt])
  @@map("login_attempts")
}
